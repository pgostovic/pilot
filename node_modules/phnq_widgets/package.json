{
  "name": "phnq_widgets",
  "description": "Embedded JavaScript templating tool",
  "homepage": "https://github.com/pgostovic/phnq_widgets",
  "keywords": [
    "phnq",
    "widgets",
    "server",
    "client",
    "browser"
  ],
  "author": {
    "name": "Patrick Gostovic",
    "email": "pg@phnq.org"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pgostovic/phnq_widgets.git"
  },
  "main": "server/phnq_widgets.js",
  "version": "1.0.39",
  "dependencies": {
    "phnq_log": "1.0.x",
    "phnq_core": "1.0.x",
    "phnq_ejs": "1.0.x",
    "sax": "0.4.0",
    "less": "1.3.x",
    "underscore": "1.3.3",
    "uglify-js": "1.3.x",
    "express": "3.x",
    "zombie": "2.0.0-alpha21",
    "mocha": "1.6.0",
    "awssum": "0.12.0",
    "mime": "1.2.x",
    "ncp": "0.4.x",
    "commander": "1.0.x"
  },
  "scripts": {
    "test": "mocha -t 10000 -R spec"
  },
  "engines": {
    "node": "0.10.x"
  },
  "bin": {
    "phnq_widgets": "./bin/phnq_widgets"
  },
  "readme": "phnq_widgets\n============\n\nPhnq_widgets is a framework for buliding Rich JavaScript Applications by\norganizing UI code along functional instead of technological lines. Instead\nof, for example, putting all the JS files into one folder, CSS files into\nanother folder, and the HTML files into yet another folder, phnq_widgets\nenncourages the grouping together of code that is functionally related,\nregardless of file type, into widgets. I call this \"functional code\norganization\".\n\nA widget is a self-contained chunk of application functionality that may\ninclude any or all of HTML markup, CSS, JavaScript or static resources such as\nimages, all in a single folder.\n\nCarving a UI into widgets has many benefits:\n\n- intuitive modularization of UI functionality\n- prevents (or at least discourages) monolithic JS and CSS files\n- facilitates the reuse of UI functionality\n- etc.\n\nFeatures\n--------\n\nIn addition to providing the substrate for functional code organization,\nphnq_widgets also provides several advanced web framework features:\n\n- implicit and explicit dependency management\n- lazy loading and deployment of client-side functionality\n- compilation of templates into JS object code, executable on server or client\n- automatic static file aggregation/minification/compression\n- pluggable interface for auto-publishing to CDNs\n\nThe details of these features will be discussed below.\n\nEverything's a Widget\n---------------------\n\nOne of the benefits of functional code organization is that it is **very**\namenable to modularization. Remember that a widget is self-contained and can\ncontain everything that it needs (HTML, CSS, JS, images, etc.). Perhaps most\nimportant is that widgets particiapte in dependency management. Examples of\nthings that can be widgets:\n\n- chunk of rich application functionality (i.e. toolbar, fancy select box, etc.)\n- 3rd party library (i.e. Twitter Bootstrap, jQuery UI, Isotope, etc.)\n- JS API for accessing some remote web service\n\nGetting Started\n---------------\n\nRequirements: node.js, npm\n\nFirst create an application folder and change into it.\n\n\tmkdir my-app\n\tcd my-app\n\nInstall phnq_widgets into your application.\n\n\tnpm install phnq_widgets\n\nGenerate your first widget called com.example.HelloWorld.\n\n\tnode_modules/.bin/phnq_widgets -g com.example.HelloWorld\n\nStart up a minimal server.\n\n\tnode_modules/.bin/phnq_widgets -s\n\nNow point your browser to:\n\n\thttp://localhost:7777/widgets/com.example.HelloWorld\n\nYou should see an extremely basic page.\n\nAdd some style. Edit the generated file\nwidgets/com/example/HelloWorld/HelloWorld.css and make it look like this:\n\n\t.__CLASS__ h1\n\t{\n\t\tpadding: 10px;\n\t\tborder: 1px solid #999;\n\t\tbackground: #ccc;\n\t\tcolor: #fff;\n\t\tfont-family: sans-serif;\n\t}\n\nRefresh your browser and and you should see the effect of the above CSS\nstylings.\n\nAdd some behaviour. Edit the generated file\nwidgets/com/example/HelloWorld/HelloWorld.js and make it look like this:\n\n\tvar widget =\n\t{\n\t\tready: function($$)\n\t\t{\n\t\t\t$$(\"h1\").click(function()\n\t\t\t{\n\t\t\t\talert(\"Hi!\");\n\t\t\t});\n\t\t}\n\t};\n\nRefresh your browser. Click on the text HelloWorld and you should trigger\nthe alert box to open.\n\nPutting the phnq_widgets utility in your PATH\n---------------------------------------------\nIn the Getting Started section we used the phnq_widgets utility a few times,\nbut the relative path to the utility is a bit cumbersome to type, so putting\nit in your PATH helps:\n\n\texport PATH=$PATH:./node_modules/.bin\n\nPut that in your shell startup script, relaunch your shell and then\nphnq_widgets will be in your PATH whenever you're in a directory that has the\nphnq_widgets module installed.\n\nNow, starting your minimal server is a bit more concise:\n\n\tphnq_widgets -s\n\nMore documentation soon...\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pgostovic/phnq_widgets/issues"
  },
  "_id": "phnq_widgets@1.0.39",
  "_from": "phnq_widgets@1.0.x"
}
